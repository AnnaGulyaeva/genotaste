


# –ò–º–ø–æ—Ä—Ç—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ, –ª–æ–∫–∞–ª—å–Ω—ã–µ
from io import StringIO
from pathlib import Path
import pandas as pd
from app.logic import get_snp_annotations


def load_target_snps() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π SNP —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é logic.get_snp_annotations."""
    results = get_snp_annotations(['rs713598', 'rs1726866', 'rs10246939'])
    print(results)
    print(results.columns.tolist())
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –Ω—É–∂–¥—ã)
    snp_dict = {}
    for _, row in results.iterrows():
        snp_dict[row['refsnp_id']] = {
            'gene': row.get('associated_gene', ''),
            'allele': row.get('allele', ''),
            'chr': row.get('chr_name', ''),
            'pos': row.get('chrom_start', '')
        }
    return snp_dict


target_snps = {
    "rs713598": "TAS2R38",
    "rs1726866": "TAS2R38",
    "rs10246939": "TAS2R38"
}

file_path = Path('C:/Users/guliaeva/PycharmProjects/open_AI/data/snp.vcf')


def load_vcf_to_dataframe() -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∑–∫–∞ VCF –≤ pandas."""
    with open(file_path) as file_data:
        lines = [line for line in file_data if not line.startswith('##')]
    
    return pd.read_csv(
        StringIO('\n'.join(lines)),
        sep='\t'
    )


def interpret_taste_profile(genotipe_series: list) -> str:
    """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∫—É—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–Ω–æ—Ç–∏–ø–æ–≤."""
    sensitive_alleles = {"rs713598": "1", "rs1726866": "1", "rs10246939": "1"}
    score = 0

    for snp, gt in genotipe_series.items():
        alleles = gt.replace('|', '/').split('/')
        score += alleles.count(sensitive_alleles[snp])

    if score >= 5:
        return '–í—ã –æ—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ –≥–æ—Ä–µ—á–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ª—é–±–∏—Ç–µ –±—Ä–æ–∫–∫–æ–ª–∏ ü•¶)'
    elif score >= 3:
        return '–£–º–µ—Ä–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –≥–æ—Ä–µ—á–∏'
    else:
        return ('–°–ª–∞–±–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –≥–æ—Ä–µ—á–∏ '
                '(–±—Ä–æ–∫–∫–æ–ª–∏ –≤–∞–º, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ –≤–∫—É—Å—É!)')


if __name__ == '__main__':
    print(load_target_snps())

    df = load_vcf_to_dataframe()

    filtered = df[df['ID'].isin(target_snps.keys())].copy()

    filtered['GT'] = filtered['SAMPLE'].str.split(':').str[0]
    genotype_series = filtered.set_index('ID')['GT']

    print("–í–∞—à–∏ –≥–µ–Ω–æ—Ç–∏–ø—ã –≤–∫—É—Å–æ–≤–æ–≥–æ –≥–µ–Ω–∞ TAS2R38:")
    for rsid, gt in genotype_series.items():
        print(f'    {rsid} ({target_snps[rsid]}): {gt}')
    
    print("\n–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
    print(interpret_taste_profile(genotype_series))